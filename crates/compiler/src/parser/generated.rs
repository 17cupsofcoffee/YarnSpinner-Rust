//! Contains the modules that were generated by ANTLR.

#[cfg_attr(rustfmt, rustfmt_skip)]
#[allow(warnings)]
#[allow(clippy)]
pub mod yarnspinnerlexer;

#[cfg_attr(rustfmt, rustfmt_skip)]
#[allow(warnings)]
#[allow(clippy)]
pub mod yarnspinnerparser;

#[cfg_attr(rustfmt, rustfmt_skip)]
#[allow(warnings)]
#[allow(clippy)]
pub mod yarnspinnerparserlistener;

#[cfg_attr(rustfmt, rustfmt_skip)]
#[allow(warnings)]
#[allow(clippy)]
pub mod yarnspinnerparservisitor;

#[cfg(test)]
mod tests {
    use super::*;
    use antlr_rust::{common_token_stream::CommonTokenStream, *};
    use yarnspinnerlexer::*;
    use yarnspinnerparser::*;

    #[test]
    fn test() {
        let lexer = YarnSpinnerLexer::new(InputStream::new(
            "# hello
# nonono
title: Node_Title
---
Here are some lines!
That's weird?
Wow!
==="
            .into(),
        ));
        let mut parser = YarnSpinnerParser::new(CommonTokenStream::new(lexer));

        let dialogue_context = parser.dialogue().unwrap();
        let hashtags = dialogue_context.file_hashtag_all();

        let output = format!("{:?}", hashtags[0].HASHTAG_TEXT().unwrap());
        assert_eq!(output, "hello");

        let output = format!("{:?}", hashtags[1].HASHTAG_TEXT().unwrap());
        assert_eq!(output, "nonono");

        let nodes = dialogue_context.node_all();
        let first_node: &std::rc::Rc<parser_rule_context::BaseParserRuleContext<NodeContextExt>> =
            &nodes[0];
        let statements = first_node.body().unwrap().statement_all();

        let output = format!(
            "{:?}",
            statements[0]
                .line_statement()
                .unwrap()
                .line_formatted_text()
                .unwrap()
                .TEXT_all()
        );
        assert_eq!(output, "[H, ere are some lines!]");

        let output = format!(
            "{:?}",
            statements[1]
                .line_statement()
                .unwrap()
                .line_formatted_text()
                .unwrap()
                .TEXT_all()
        );

        assert_eq!(output, "[T, hat's weird?]");
        let output = format!(
            "{:?}",
            statements[2]
                .line_statement()
                .unwrap()
                .line_formatted_text()
                .unwrap()
                .TEXT_all()
        );
        assert_eq!(output, "[W, ow!]");

        let title = first_node.header(0);
        let output = format!("{:?}", title.unwrap().REST_OF_LINE().unwrap());
        assert_eq!(output, "Node_Title");
    }
}
